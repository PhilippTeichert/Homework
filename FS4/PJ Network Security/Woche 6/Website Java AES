

    * Startseite
    * AxxG
    * Apps ¬ª
          o re:publica 15
          o 31C3
          o re:publica 14
          o unreadable
          o Quick-Voting
          o BitmapCat
    * Projekte
    * Hauptthemen ¬ª
          o Softwarearchitektur
          o Java / Java EE
          o JavaFX
          o Web Service
          o C / C++
          o Links
    * Kontakt
    * Impressum

Original text
Contribute a better translation
Java: AES Verschl√ºsselung mit Beispiel
Gepostet von Alexander Gr√§sel in Java / Java EE, Sicherheit, Softwareentwicklung am 29 Juli, 2013 | 10 Kommentare

Java Verschl√ºsselungDie letzten Wochen ging es hei√ü her: Nicht nur die Temperaturen in Deutschland waren extrem, sondern auch die Enth√ºllung von PRISM und co. Dabei entscheidet jeder selbst, welche Dienste er nutzt und was er verschl√ºsseln will. Auf dem Markt gibt es viele verschiedene Technologien, wie zum Beispiel:

   1. PGP-Verschl√ºsselung und Signatur f√ºr E-Mails oder Dateien
   2. AES oder IDEA f√ºr Texte
   3. ‚Ä¶

Heute zeige ich kurz und knapp, wie man eine AES-Verschl√ºsselung mit Java realisiert.

 
AES Key aus einem String generieren

Das A und O einer symmetrischen Verschl√ºsselung ist der Schl√ºssel. Dabei gibt es viele verschiedene Wege einen Schl√ºssel zu generieren. Eine M√∂glichkeit ist das Generieren eines zuf√§lligen Keys (Habe ich hier beschrieben und den Schl√ºssel in eine Datei geschrieben) oder man generiert sich einen Key aus einem String/Text.
?
01
02
03
04
05
06
07
08
09
10
11
	
// Das Passwort bzw der Schluesseltext
String keyStr = "geheim";
// byte-Array erzeugen
byte[] key = (keyStr).getBytes("UTF-8");
// aus dem Array einen Hash-Wert erzeugen mit MD5 oder SHA
MessageDigest sha = MessageDigest.getInstance("SHA-256");
key = sha.digest(key);
// nur die ersten 128 bit nutzen
key = Arrays.copyOf(key, 16);
// der fertige Schluessel
SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");

 
Text mit AES verschl√ºsseln

Die meiste Arbeit ist bereits getan ‚Äì mit dem Schl√ºssel kann man nun beliebige Texte verschl√ºsseln:
?
01
02
03
04
05
06
07
08
09
10
11
12
13
14
	
// der zu verschl. Text
String text = "Das ist der Text";
 
// Verschluesseln
Cipher cipher = Cipher.getInstance("AES");
cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
byte[] encrypted = cipher.doFinal(text.getBytes());
 
// bytes zu Base64-String konvertieren (dient der Lesbarkeit)
BASE64Encoder myEncoder = new BASE64Encoder();
String geheim = myEncoder.encode(encrypted);
 
// Ergebnis
System.out.println(geheim);

 
Text mit AES entschl√ºsseln

Das Ganze kann man nat√ºrlich auch umdrehen:
?
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
	
// der verschl. Text
String geheim = "jcZyVG7CAfD+FQ9gAkhbfwzRD+tpKxeq8GRh+ub/uuc=";
 
// BASE64 String zu Byte-Array konvertieren
BASE64Decoder myDecoder2 = new BASE64Decoder();
byte[] crypted2 = myDecoder2.decodeBuffer(geheim);
 
// Entschluesseln
Cipher cipher2 = Cipher.getInstance("AES");
cipher2.init(Cipher.DECRYPT_MODE, secretKeySpec);
byte[] cipherData2 = cipher2.doFinal(crypted2);
String erg = new String(cipherData2);
 
// Klartext
System.out.println(erg);

 
Das gesamte Beispiel
?
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
	
package axxg;
 
import java.security.MessageDigest;
import java.util.Arrays;
 
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
 
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
 
public class AxxGBlog {
 
   /**
    * @param args
    * @throws Exception
    */
   public static void main(String[] args) throws Exception {
 
       
      // Das Passwort bzw der Schluesseltext
      String keyStr = "geheim";
      // byte-Array erzeugen
      byte[] key = (keyStr).getBytes("UTF-8");
      // aus dem Array einen Hash-Wert erzeugen mit MD5 oder SHA
      MessageDigest sha = MessageDigest.getInstance("SHA-256");
      key = sha.digest(key);
      // nur die ersten 128 bit nutzen
      key = Arrays.copyOf(key, 16);
      // der fertige Schluessel
      SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
       
 
      // der zu verschl. Text
      String text = "Das ist der Text";
 
      // Verschluesseln
      Cipher cipher = Cipher.getInstance("AES");
      cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
      byte[] encrypted = cipher.doFinal(text.getBytes());
 
      // bytes zu Base64-String konvertieren (dient der Lesbarkeit)
      BASE64Encoder myEncoder = new BASE64Encoder();
      String geheim = myEncoder.encode(encrypted);
 
      // Ergebnis
      System.out.println(geheim);
       
      // BASE64 String zu Byte-Array konvertieren
      BASE64Decoder myDecoder2 = new BASE64Decoder();
      byte[] crypted2 = myDecoder2.decodeBuffer(geheim);
 
      // Entschluesseln
      Cipher cipher2 = Cipher.getInstance("AES");
      cipher2.init(Cipher.DECRYPT_MODE, secretKeySpec);
      byte[] cipherData2 = cipher2.doFinal(crypted2);
      String erg = new String(cipherData2);
 
      // Klartext
      System.out.println(erg);
 
   }
 
}

 
Die Quellen

    * Thorben Wengert / pixelio.de
    * AES bei Wiki
    * http://de.wikipedia.org/wiki/Base64
    * Torsten Horn
    * http://openbook.galileocomputing.de/java7/1507_22_006.html

 

Copyright ¬© 2013 AxxG ‚Äì Alexander Gr√§sel

    * Klick, um auf Facebook zu teilen (Wird in neuem Fenster ge√∂ffnet)
    * Zum Teilen auf Google+ anklicken (Wird in neuem Fenster ge√∂ffnet)
    * Klick, um √ºber Twitter zu teilen (Wird in neuem Fenster ge√∂ffnet)
    * Klick, um auf LinkedIn zu teilen (Wird in neuem Fenster ge√∂ffnet)
    * Klick, um auf Pocket zu teilen (Wird in neuem Fenster ge√∂ffnet)
    * Klick, um dies einem Freund per E-Mail zu senden (Wird in neuem Fenster ge√∂ffnet)
    * Klicken zum Ausdrucken (Wird in neuem Fenster ge√∂ffnet)
*


Verwandte Beitr√§ge

    * Java: AES / RSA Keys lesen und schreiben (Datei)
    * Java: Verschl√ºsselung mit Beispiel (Quickstart)
    * Java: Eine einmalige, eindeutige und zuf√§llige Identifikationsnummer generieren (ID oder UUID)
    * Model-View-Controller (MVC) mit JavaFX
    * Web Service Release- / Versionsinformation (ANT)


10 Antworten : ‚ÄúJava: AES Verschl√ºsselung mit Beispiel‚Äù

   1.
      tester sagt:
      20. Dezember 2014 um 22:25

      Die meiste Arbeite <-Rechtschreibfehler üòâ
      Antworten
          *
            Alexander Gr√§sel sagt:
            21. Dezember 2014 um 22:04

            Danke f√ºr die Korrektur:)
            Antworten
                o
                  tester sagt:
                  22. Dezember 2014 um 15:01

                  No prob. Super Seite. Habe das ganze heute einmal ausprobiert.Bin begeistert. Frohe Weihnachten.
                  Antworten
   2.
      Raphael sagt:
      23. Dezember 2014 um 15:31

      Vielen Dank f√ºr deinen Beitrag. Um das Beispiel aber in der Realtit√§t verwenden zu k√∂nnen m√∂chte ich eine Klasse mit zwei Funktionen encrypt und decrypt schreiben. Ich frage mich nun ob das SecretKeySpec Objekt bei beiden das Gleiche sein muss, was ja aber in der Praxis nicht unbedingt machbar ist, da vielleicht die Entschl√ºsselung in einem viel sp√§teren Zeitpunkt auftritt und das SecretKeySpec Objekt nicht verf√ºgbar ist. Kannst du mir weiterhelfen? Ich frage dich das, weil ich es eben selber schon getestet habe und da bekam ich nicht bei der Entschl√ºsselung nicht mehr den Ursprungstext zur√ºck..
      Antworten
   3.
      Eric sagt:
      10. Januar 2015 um 10:42

      Toller Artikel, vielen Danke daf√ºr :).

      @Raphael.

      Das SecretKeySpec Objekt wird ja mithilfe des Strings keyStr, welcher vorher in das key array umgewandelt wird, erzeugt.

      Du kannst das SecretKeySpec Objekt also ruhig neu erzeugen, musst dabei nur den selben keyStr benutzen. üôÇ

      Viele Gr√º√üe
      Antworten
          *
            Alexander Gr√§sel sagt:
            10. Januar 2015 um 13:23

            Hey Eric,
            danke f√ºr die Beantwortung der Frage. √úber Weihnachten ist die leider untergegangen:-(
            Antworten
   4.
      Bastian sagt:
      16. September 2015 um 19:12

      Hey, echt coole Anleitung! Es hat mir sehr weitergeholfen!

      Allerdings gab es bei mir Probleme mit den BASE64Encoder und -Decoder Klassen. Er hat sie nicht gefunden (kann auch sein, dass ich einen Fehler gemacht habe, ich bin in Java ziemlich neu). F√ºr alle die aber auch dar√ºber stolpern sollten, ich konnte aus der java.util.Base64 Klasse mittels Base64.Encoder myEncoder = Base64.getEncoder() ein Objekt erzeugen.

      Eine kleine Frage h√§tte ich noch, vielleicht wei√ü da jemand eine gute L√∂sung. Zur Zeit wird der Schl√ºssel f√ºr die Verschl√ºsselung noch im Quelltext gespeichert. Das ist an sich ja schon ziemlich unsicher, da man den Bytecode jederzeit wieder zu Klartext zur√ºckkonvertierten kann. Gibt es einen Weg den Schl√ºssel ohne riesigen Aufwand zu sichern?
      Antworten
          *
            Alexander Gr√§sel sagt:
            16. September 2015 um 20:05

            Hey Bastian,
            sch√∂n, dass dir mein Beitrag gef√§llt:)

            @Base64
            Das Problem habe ich schon hier beschrieben;-)
            http://blog.axxg.de/java-kodierung-base64/

            @Speicherung des Keys
            Das ist immer das gr√∂√üte Problem. Die L√∂sung: Es gibt keine Pauschall√∂sung:-/
            + Auf Android hat man die M√∂glichkeit den Key in einem sicheren Speicherbereich des Prozessors oder im security Element abzulegen.
            + Auf Windows und co kann man den AES Schl√ºssel per RSA/SSL auf den Client zur Laufzeit √ºbertragen und mit Hardware-Spec‚Äôs verschl√ºsseln.
            + Man kann den Schl√ºssel aus einer Zeitvorgabe oder einen Key generieren
            + etc‚Ä¶‚Ä¶.
            Such dir was aus;-)
            Antworten
   5.
      Fabian sagt:
      15. Mai 2016 um 21:06

      ACHTUNG! Hier wird die AES-Chiffre im ECB-Modus gezeigt! Das ist h√∂chst fahrl√§ssig und unsicher!
      Bitte lesen: https://de.wikipedia.org/wiki/Electronic_Code_Book_Mode

      Weiter oben wird dann einfach auch ein Schl√ºssel per MD5 erzeugt. Man mag meinen, dass man da ja auch kein Hash zb. f√ºr Benutzeranmeldungen in ne Datenbank bringen will und das ausreiche. Falsch! Ein starker Hash zb. per PBKDF2 und ausreichend gesalzen ist auch hier essenziell! Stichwort: Brute-Forcing mit W√∂rterbuch! Mit MD5 geht das rasend schnell!

      Ich hoffe, dass das jeder liest, der diese Seite besucht. Ich selbst bin auch kein Kryptograph, aber das hier ist offensichtlich.
      Antworten
          *
            Alexander Gr√§sel sagt:
            15. Mai 2016 um 23:15

            Hey Fabian,
            erstmal danke f√ºr deinen Kommentar.

            zu 1. ECB-Modus
            Der Beitrag richtet sich an Anf√§nger, die noch nichts mit AES gemacht haben. Daher gilt: je einfach desto besser. Wer einen anderen Modus nutzen will, kann gerne die Zeile 38 durch
            Cipher.getInstance(‚ÄûAES/CBC/NoPadding‚Äú);
            ersetzen;-)

            2. der Schl√ºssel
            Siehe Oben;-) Ich zeige eine einfache M√∂glichkeit ‚Äì mehr nicht, aber ich habe mal das Beispiel gegen SHA ersetzt‚Ä¶.
            Antworten

Kommentar verfassen Antwort abbrechen
AxxG Blog
√úber mich
Willkommen, Welcome, Velkommen, Bienvenue, Benvenuti, Bienvenido! Mein Name ist Alexander Gr√§sel und ich bin Masterstudent der Fachrichtung Wirtschaftsinformatik. Ich schreibe diesen Blog um einerseits mein Wissen zu dokumentieren und anderseits das Unwissen der Menschheit etwas zu minimieren. Prim√§r besch√§ftige ich mich mit der Softwareentwicklung in Java, Java EE und C/C++. Zus√§tzlich befasse ich mich mit (Web)Desgin, Joomla, Wordpress und nat√ºrlich Flash/Actionscript 3:-)
Folgen
Verfolgen auf FacebookVerfolgen auf Google+Verfolgen auf TwitterVerfolgen auf RSS
Sprache
Powered by Translate

Kalender
Juli 2016 M 	D 	M 	D 	F 	S 	S
¬´ Mrz 	  	 
 	1	2	3
4	5	6	7	8	9	10
11	12	13	14	15	16	17
18	19	20	21	22	23	24
25	26	27	28	29	30	31
Kategorien

    * Allgemein
    * Betriebsysteme
          o Android
          o iOS
          o Windows
    * Events
          o JAX
          o NeueVerwaltung
          o re:publica
    * Hardware
    * Internet
    * Programmierung
          o C/C++
          o Flash
                + Actionscript 3
          o HTML
          o Java / Java EE
                + JavaFX
                + Web Service
          o JavaScript
                + jQuery Mobile
          o PHP
    * Sicherheit
    * Softwareentwicklung
    * Softwaretest

Initiative
ccd profile for AxxG at Stack Overflow, Q&A for professional and enthusiast programmers
Links

    * (AS3) Active Tutsplus (Tutorials)
    * Launch-Rock (Web Tools)
    * Web-Projaggt (coole Flashseiten)
    * Netsetman (Netzwerkverbindungen verwalten) (Web Tools)
    * Android Asset Studio (Frameworks & APIs)

Anzeige

¬© 2013 AxxG Blog. All rights reserved. | Powered by WordPress and hosted by All-Inkl.com
Blogverzeichnis - Blog Verzeichnis bloggerei.deBlogverzeichnis
sponsored
An E-Mail-Adresse senden Dein Name Deine E-Mail-Adresse loading Abbrechen
Beitrag nicht abgeschickt - E-Mail Adresse kontrollieren!
E-Mail-√úberpr√ºfung fehlgeschlagen, bitte versuche es noch einmal
Ihr Blog kann leider keine Beitr√§ge per E-Mail teilen.
:)
